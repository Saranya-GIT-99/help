import requests
import csv
import getpass
from datetime import datetime, timedelta

def get_all_projects(gitlab_url, token):
    projects = []
    page = 1
    api_url = f"{gitlab_url}/api/v4/projects"

    while True:
        response = requests.get(
            api_url,
            headers={"PRIVATE-TOKEN": token},
            params={
                "per_page": 100,
                "page": page,
                "statistics": True,
                "simple": True
            }
        )

        if response.status_code != 200:
            raise Exception(f"API request failed with status {response.status_code}: {response.text}")

        projects_page = response.json()
        if not projects_page:
            break

        projects.extend(projects_page)
        page += 1

    return projects

def format_size(size_bytes):
    return round(size_bytes / (1024 ** 2), 2) if size_bytes else 0.0

def is_project_empty(project):
    return project.get('statistics', {}).get('storage_size', 0) == 0 or \
           project.get('default_branch') is None

def is_project_inactive(last_activity_date, months=6):
    """Consider project inactive if no activity in last X months (default: 6)"""
    if not last_activity_date:
        return True
    last_active = datetime.fromisoformat(last_activity_date.replace('Z', '+00:00'))
    cutoff_date = datetime.utcnow() - timedelta(days=months*30)
    return last_active < cutoff_date

def main():
    gitlab_url = input("Enter GitLab instance URL (e.g., https://gitlab.com): ").strip()
    token = getpass.getpass("Enter GitLab access token: ")
    gitlab_url = gitlab_url.rstrip('/')

    try:
        print("\nFetching projects...")
        all_projects = get_all_projects(gitlab_url, token)
        
        if not all_projects:
            print("No projects found")
            return

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"gitlab_active_projects_{timestamp}.csv"

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'Project Name', 
                'Project ID', 
                'Size (MB)', 
                'Created At',
                'Last Activity At', 
                'Status',
                'Topics',
                'Web URL'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            active_count = 0
            inactive_count = 0

            for project in all_projects:
                # Skip archived and empty projects
                if project.get('archived') or is_project_empty(project):
                    continue

                # Get last activity date
                last_activity = project.get('last_activity_at')
                
                # Determine status
                status = "Inactive" if is_project_inactive(last_activity) else "Active"

                # Count status
                if status == "Active":
                    active_count += 1
                else:
                    inactive_count += 1

                writer.writerow({
                    'Project Name': project.get('name', 'N/A'),
                    'Project ID': project.get('id', 'N/A'),
                    'Size (MB)': format_size(project.get('statistics', {}).get('storage_size', 0)),
                    'Created At': project.get('created_at', 'N/A'),
                    'Last Activity At': last_activity or 'N/A',
                    'Status': status,
                    'Topics': ', '.join(project.get('topics', [])) or 'None',
                    'Web URL': project.get('web_url', 'N/A')
                })

        print(f"\nReport generated: {filename}")
        print(f"Total active projects: {active_count}")
        print(f"Total inactive projects: {inactive_count}")

    except Exception as e:
        print(f"\nError: {str(e)}")

if __name__ == "__main__":
    main()
