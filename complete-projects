import requests
import csv
import getpass
from datetime import datetime

def get_all_projects(gitlab_url, token):
    projects = []
    page = 1
    api_url = f"{gitlab_url}/api/v4/projects"

    while True:
        response = requests.get(
            api_url,
            headers={"PRIVATE-TOKEN": token},
            params={
                "per_page": 100,
                "page": page,
                "statistics": True,
                "simple": True
            }
        )

        if response.status_code != 200:
            raise Exception(f"API request failed with status {response.status_code}: {response.text}")

        projects_page = response.json()
        if not projects_page:
            break

        projects.extend(projects_page)
        page += 1

    return projects

def format_size(size_bytes):
    return round(size_bytes / (1024 ** 2), 2)  # Convert bytes to MB

def is_project_empty(project):
    return project.get('statistics', {}).get('storage_size', 0) == 0 or \
           project.get('default_branch') is None

def main():
    # Get runtime input
    gitlab_url = input("Enter GitLab instance URL (e.g., https://gitlab.com): ").strip()
    token = getpass.getpass("Enter GitLab access token: ")
    
    gitlab_url = gitlab_url.rstrip('/')

    try:
        print("\nFetching projects...")
        projects = get_all_projects(gitlab_url, token)
        
        if not projects:
            print("No projects found")
            return

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"gitlab_projects_{timestamp}.csv"

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'Project Name', 'Project ID', 'Size (MB)', 'Created At',
                'Last Activity At', 'Archived', 'Is Empty', 'Topics',
                'Web URL'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for project in projects:
                size_mb = format_size(project.get('statistics', {}).get('storage_size', 0))
                topics = ', '.join(project.get('topics', [])) or 'None'
                
                writer.writerow({
                    'Project Name': project['name'],
                    'Project ID': project['id'],
                    'Size (MB)': size_mb,
                    'Created At': project['created_at'],
                    'Last Activity At': project['last_activity_at'],
                    'Archived': project['archived'],
                    'Is Empty': is_project_empty(project),
                    'Topics': topics,
                    'Web URL': project['web_url']
                })

        print(f"\nSuccessfully exported {len(projects)} projects to {filename}")

    except Exception as e:
        print(f"\nError: {str(e)}")

if __name__ == "__main__":
    main()
